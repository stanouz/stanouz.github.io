PyDeepan - An expression recognition research project I worked on. It uses machine learning algorithm to predict an expression based on several
position of human body stored in big datasets. I had to add a real time motion capture functionality in order to predict expression live. The main
parts of the job were to capture the data, transform it into the format used by the neural network and then predict the expression. I also provide a 
3D vizualization tool using <a href="https://www.panda3d.org/"> Panda3D</a>.
<hr/>
<br/>


<a href="/portfolio/Llama.pdf" target="_blank"> Local Implementation of a Conversational Agent</a> -  For a school project, I have experiment of local implementation of LLM ChatBot with classmates. We used <a href="https://huggingface.co/"> HuggingFace </a> to get different pre trained weights of models and compares it. You will find more explanation in the link above.


<hr />
<br />

Lego Soccer Players - Our project involved creating a team of LEGO Mindstorms robots to play soccer. LEGO Mindstorms robots are equipped with programmable control bricks capable of controlling various types of motors. We started by building the robots and experimenting with different robot architectures. We also set up a communication server to interact with the robots and the ceiling-mounted cameras. We implemented a robot detection system by streaming camera feeds to determine their positions and send it to robots. Additionally, we designed offensive and defensive strategies to score goals and prevent the opposing team from scoring. This project was really interesting as it combined programming for movement calculations etc.., AI for strategies, networking for communication, and image analysis for field detection and player position.


<hr />
<br />

<a href="/portfolio/taquin.pdf" target="_blank"> System Multi-Agent - Taquin Puzzle</a> -  The project aims to develop a multi-agent system to solve the Taquin puzzle, a classic sliding puzzle game where the goal is to rearrange the pieces to form a complete image. The primary goal of this project is to create a system where multiple agents work together to solve the Taquin puzzle efficiently. Each agent should contribute to finding a solution by performing specific tasks and collaborating with others. Agents need to communicate with each other to exchange information and coordinate actions. We tried differents heuristics to guide agents in evaluating the desirability of certain puzzle states and avoid blocking states. You will find more explanation in the link above.


<hr />
<br />

Reinforcment Learning - I have done several small project to learn reinforcment learning principles, such as Value-Based algorithm (Markov Decision Process, Tabular QLearning or Deep QLearning using neural network) or Policy-Based algotithme (Hill Climb). Problems were pretty simple but implemented  in Python using <a href="https://gymnasium.farama.org/"> Gymnasium</a> and <a href="https://pytorch.org/"> PyTorch</a>, these implementations can be used in more complex problems using optimal hyperparameters. The goal of these small project was to understand how most used reinforcment learning algorithms works and how to tune hyperparameters correctly.

<hr />
<br />

PyTorch Neural Network for digit recognition - I worked on a neural network development project using PyTorch for digit recognition on the MNIST dataset. I began with a single hidden layer network, explored the impact of multiple hidden layers, and eventually implemented a Convolutional Neural Network (CNN) using LeNet5 architecture. The main goal was to experiment with hyperparameters (learning rate, batch size, number of hidden layers, number of neurons...) and understand their influence on the model's performance. 


<hr />
<br />

<a href="https://github.com/stanouz/smart-city">Smart city</a> - A distributed method for assigning parking spaces to smart vehicles. Cars and 
parking lots communicate using a messaging system, in order to negociate the best price for both. Prices are dynamically calculated by parkings 
taking into account parameters like occupancy rate, parking time, fidelity bonuses... Cars offer prices and try to get the lowest price, they 
negociate with several parkings simultaneously, so they can get lower prices. Vehicles are driving autonomously on a city map and once they get a
park proposal, they go to the choosen parking lot and park for the time they asked for. A GUI allows users to see the communications live and to get some
stats on each parking lot. The projects is written in C++ using <a href="https://github.com/ocornut/imgui">ImGui</a> and <a href="https://www.sfml-dev.org/index-fr.php">SFML</a>
GUIs.
<hr/>
<br/>



<a href="https://github.com/stanouz/CityQuiz"> CityQuiz</a> - During summer holidays, right after high school, I wanted to practice my Python's skills.
I found a CSV database listing the 36'000 French cities with information like number of inhabitants, GPS coordinates, area... I made a little GUI quiz
using Python and <a href="https://docs.python.org/fr/3/library/tkinter.html">tkinter</a>, we get 20 random cities and we have to place those on a map, to guess
area and number of inhabitants. Scores are calculated by the distance of real location, gaps with number of inhabitants and area... Later, I added a 
feature that allow users to open a chromium window with the city pinned on an <a href="https://www.openstreetmap.fr/">OpenStreetMap</a> map.
<hr/>
<br/>



<a href="https://github.com/stanouz/projet-sfl"> Projet-sfl</a> - 2D 'Zelda like' game. Explore the open-world to fight your ennemies and fulfill the 
request of the NPCs, made for an academic projet with 2 other students. We wanted to have nice looking map, so we used the <a href="https://www.mapeditor.org/"> Tiled</a>
map editor software, then we developped a parsing tool in order to retrieve and save all usefull information of .tmx and .tsx files generated by Tiled.
We also developped AI's for NPC and ennemies, NPC can just talk with the player when he is close enough. However, ennemies want to fight the player, when he 
enters in their visibility radius, they run on him and if they can get close enough, they hit the player. Fortunatly, the player is faster than ennemies 
so he can easily run away and go back to fight when he has enough pv. The game is over when player dies or all ennemies have been killed.
