name: Fetch Files from Dropbox

on:
  workflow_dispatch:
    # This allows manual triggering of the workflow.

jobs:
  fetch-files:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout Repository
      uses: actions/checkout@v3

    # Step 2: Set up Python environment (to use Dropbox API)
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Step 3: Install Dependencies
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install dropbox

    # Step 4: Fetch Files from Dropbox
    - name: Fetch Files from Dropbox
      env:
        DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
      run: |
        python <<EOF
        import dropbox
        import os

        # Initialize Dropbox Client
        dbx = dropbox.Dropbox(os.environ['DROPBOX_ACCESS_TOKEN'])

        def list_files_recursive(folder_path, indent=0):
          """
          Recursively list all files and folders in the specified Dropbox folder.
          """
          try:
              # List the contents of the current folder
              response = dbx.files_list_folder(path=folder_path)
              
              # Iterate through each entry in the folder
              for entry in response.entries:
                  if isinstance(entry, dropbox.files.FileMetadata):
                      print("  " * indent + f"File: {entry.name}")
                  elif isinstance(entry, dropbox.files.FolderMetadata):
                      print("  " * indent + f"Folder: {entry.name}")
                      # Recursive call for subfolders
                      list_files_recursive(entry.path_lower, indent + 1)
              
              # Check for additional pages (pagination)
              while response.has_more:
                  response = dbx.files_list_folder_continue(response.cursor)
                  for entry in response.entries:
                      if isinstance(entry, dropbox.files.FileMetadata):
                          print("  " * indent + f"File: {entry.name}")
                      elif isinstance(entry, dropbox.files.FolderMetadata):
                          print("  " * indent + f"Folder: {entry.name}")
                          list_files_recursive(entry.path_lower, indent + 1)
      
          except dropbox.exceptions.ApiError as e:
              print(f"Error accessing {folder_path}: {e}")

        # Start the recursive listing from the root or a specific folder
        folder_path = ""  # Replace with your starting folder path, or use "" for the root
        print(f"Listing all files and folders starting from: {folder_path}")
        list_files_recursive(folder_path)

        EOF

    # Step 5: Add and Commit Changes
    - name: Commit and Push Changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Add files from Dropbox"
        git push
